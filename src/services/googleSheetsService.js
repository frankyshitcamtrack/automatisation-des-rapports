// googleSheetsService.js
const { google } = require('googleapis');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');

const privateKey = process.env.GOOGLE_PRIVATE_KEY;

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  key: privateKey.replace(/\\n/g, '\n'),
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

/* async function getData(group, col) {
  const doc = new GoogleSpreadsheet(
    "1ZYShwRgVtCrDciKhSINIcbJyFbDyBDxkCH802AkJp5A",
    serviceAccountAuth
  );

  await doc.loadInfo(); // loads document properties and worksheets

  const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`

  const rows = await sheet.getRows();

  if (rows) {
    const r = rows.filter((item) => item._rawData.includes(group));

    const rowNumber = r[0]._rowNumber;
    await sheet.loadCells(`A${rowNumber}:${col}${rowNumber}`);

    const cell = sheet.getCellByA1(`${col}${rowNumber}`);
    const cellVal = cell._rawData.effectiveValue["stringValue"].split(";");

    return cellVal;
  }
}
 */

async function getData(group, col) {
  const doc = new GoogleSpreadsheet(
    '1XtoyeFJEcdEpcmCY_GB4yG-v5T4rs-10UTW-R2MFKvM',
    serviceAccountAuth
  );

  await doc.loadInfo(); // loads document properties and worksheets

  const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`

  const rows = await sheet.getRows();

  if (rows) {
    const r = rows.filter((item) => item._rawData.includes(group));

    const rowNumber = r[0]._rowNumber;
    await sheet.loadCells(`A${rowNumber}:${col}${rowNumber}`);

    const cell = sheet.getCellByA1(`${col}${rowNumber}`);
    const cellVal = cell._rawData.effectiveValue['stringValue'].split(';');

    return cellVal;
  }
}

module.exports = { getData };
